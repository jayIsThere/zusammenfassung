<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>KBE on Jays Zusammenfassung</title>
    <link>https://jayIsThere.github.io/zusammenfassung/categories/kbe/</link>
    <description>Recent content in KBE on Jays Zusammenfassung</description>
    <generator>Hugo -- 0.146.6</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Apr 2025 18:13:15 +0200</lastBuildDate>
    <atom:link href="https://jayIsThere.github.io/zusammenfassung/categories/kbe/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vorlesung 3: komponentenbasiertes Software-Engineering</title>
      <link>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe3/</link>
      <pubDate>Thu, 17 Apr 2025 18:13:15 +0200</pubDate>
      <guid>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe3/</guid>
      <description>&lt;h3 id=&#34;-grundprinzipien-der-kbse&#34;&gt;🧩 Grundprinzipien der KBSE&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unabhängige Komponenten&lt;/strong&gt;
– Austauschbar, Schnittstellen-basiert&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Komponentenstandards&lt;/strong&gt;
– Einheitliche Schnittstellendefinition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Middleware-Unterstützung&lt;/strong&gt;
– Kommunikation, Ressourcen, Sicherheit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Wiederverwendung im Prozess&lt;/strong&gt;
– Schon bei Planung und Entwicklung&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-herausforderungen-im-kbse&#34;&gt;⚠️ Herausforderungen im KBSE&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Thema&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Problemstellung&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Vertrauenswürdigkeit&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Blackbox-Komponenten erschweren Verständnis&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Komponentenzertifizierung&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Wer haftet bei Fehlern? Rechtlich unklar&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Emergente Eigenschaften&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Unvorhersehbares Verhalten bei Integration&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Anforderungskompromisse&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Passende Komponente ≠ perfekte Erfüllung aller Anforderungen&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-zentrale-entwurfsprinzipien&#34;&gt;🎯 Zentrale Entwurfsprinzipien&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unabhängigkeit&lt;/strong&gt; der Komponenten&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stabile, klar definierte Schnittstellen&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Standardisierte Infrastruktur&lt;/strong&gt; mit Basisdiensten&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-komponenten-als-dienstanbieter&#34;&gt;🧩 Komponenten als Dienstanbieter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Kapseln Funktionalität → Zugriff nur über Schnittstelle&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lokalisation &amp;amp; Sprache irrelevant&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Vorteil&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Erklärung&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Unabhängigkeit&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Austauschbar ohne Einfluss auf andere Komponenten&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Schnittstellenbasiert&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Kein interner Zugriff nötig&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-komponenten-vs-objekte&#34;&gt;🔍 Komponenten vs. Objekte&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Merkmal&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Komponente&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Objekt&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Deployment&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Direkt ausführbar&lt;/td&gt;
          &lt;td&gt;Bestandteil eines Programms&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Typdefinition&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Instanz mit eigener Struktur&lt;/td&gt;
          &lt;td&gt;Objekt auf Basis einer Klasse&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Transparenz&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Blackbox, nur API sichtbar&lt;/td&gt;
          &lt;td&gt;Intern oft sichtbar&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Sprachabhängigkeit&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Sprachunabhängig (.NET, WSDL)&lt;/td&gt;
          &lt;td&gt;Sprachgebunden (z. B. Java)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Standardisierung&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Muss Modell folgen&lt;/td&gt;
          &lt;td&gt;Frei definierbar&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-komponentenschnittstellen&#34;&gt;🧩 Komponentenschnittstellen&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Schnittstellentyp&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Beschreibung&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Provided Interface&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;API der Komponente: was sie bietet&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Required Interface&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Externe Dienste, die die Komponente benötigt&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-uml-notation-für-komponenten&#34;&gt;📐 UML-Notation für Komponenten&lt;/h3&gt;
&lt;p&gt;🧱 &lt;strong&gt;Komponente&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vorlesung 2: Wiederverwendung von Software 2</title>
      <link>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe2/</link>
      <pubDate>Thu, 10 Apr 2025 18:04:15 +0200</pubDate>
      <guid>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe2/</guid>
      <description>&lt;h3 id=&#34;-wiederverwendungstechniken-nach-sommerville&#34;&gt;🔁 Wiederverwendungstechniken (nach Sommerville)&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Technik&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Beschreibung &amp;amp; Beispiel&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Frameworks&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Architektur für verwandte Anwendungen. z. B. Spring MVC mit MVC-Muster&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Inversion of Control&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Steuerung durch Framework, z. B. Callbacks&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Entwurfsmuster&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Lösung wiederkehrender Probleme – z. B. Observer, Strategy&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Architekturmuster&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Struktur ganzer Systeme – z. B. Microservices&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;ERP-Systeme&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Konfigurierbare Geschäftssysteme – z. B. SAP&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Komponentenbasiert&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Austauschbare Module, klare Schnittstellen&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Modellgetrieben&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Generierung aus Modellen (plattformunabhängig)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Serviceorientiert&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Verteilte Webservices – z. B. REST, SOAP&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Softwareproduktlinien&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Gemeinsame Codebasis mit variabler Konfiguration&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-framework-klassifizierung-fayad--schmidt&#34;&gt;🧱 Framework-Klassifizierung (Fayad &amp;amp; Schmidt)&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Typ&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Beispiele&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Systeminfrastruktur&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;GUI, Compiler, Kommunikationsframeworks&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Middleware-Integration&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Jakarta EE, .NET&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Unternehmensanwendungen&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Branchenspezifisch: Telekom, Finanzen etc.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-wiederverwendung-von-anwendungssystemen&#34;&gt;🧩 Wiederverwendung von Anwendungssystemen&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Typ&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Beschreibung&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Softwareproduktlinien&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Gemeinsamer Kern mit variablen, anpassbaren Komponenten&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Konfigurierbare Systeme&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Systeme, die über Parameter oder Module an spezifische Bedürfnisse angepasst werden können (z. B. ERP)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Integrierte Systeme&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Kombination verschiedener Anwendungen über Schnittstellen (z. B. APIs)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-vorteile---herausforderungen&#34;&gt;✅ Vorteile &amp;amp; ⚠️ Herausforderungen&lt;/h3&gt;
&lt;p&gt;✅ &lt;strong&gt;Vorteile&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vorlesung 1: Wiederverwendung von Software 1</title>
      <link>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe1/</link>
      <pubDate>Thu, 03 Apr 2025 17:19:30 +0200</pubDate>
      <guid>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe1/</guid>
      <description>&lt;h3 id=&#34;-einführung-in-die-softwarewiederverwendung&#34;&gt;🧩 Einführung in die Softwarewiederverwendung&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;📌 Definition:&lt;/strong&gt;
Wiederverwendung bestehender Softwarekomponenten (z. B. Code, Module, Systeme)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;🎯 Motivation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geringere Kosten&lt;/li&gt;
&lt;li&gt;Höhere Qualität&lt;/li&gt;
&lt;li&gt;Schnellere Markteinführung&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;📈 Relevanz:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wichtiger seit 2000&lt;/li&gt;
&lt;li&gt;Gründe: steigende Softwarekomplexität, höherer Kostendruck&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-skalierung-wiederverwendbarer-softwareeinheiten&#34;&gt;🧱 Skalierung wiederverwendbarer Softwareeinheiten&lt;/h3&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;strong&gt;Ebene&lt;/strong&gt;&lt;/th&gt;
          &lt;th&gt;&lt;strong&gt;Beschreibung&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Systeme von Systemen&lt;/td&gt;
          &lt;td&gt;Integration ganzer, autonomer Systeme&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Anwendungssysteme&lt;/td&gt;
          &lt;td&gt;Konfigurierbare Standardsoftware&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Anwendungsfamilien&lt;/td&gt;
          &lt;td&gt;Gemeinsame Architektur mit Anpassungsmöglichkeiten&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Komponenten&lt;/td&gt;
          &lt;td&gt;Module mittlerer Granularität&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Objekte &amp;amp; Funktionen&lt;/td&gt;
          &lt;td&gt;Kleinste Einheiten, z. B. in Bibliotheken enthalten&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;-vorteile-der-wiederverwendung&#34;&gt;✅ Vorteile der Wiederverwendung&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;💰 &lt;strong&gt;Kosten- und Zeitersparnis&lt;/strong&gt;
→ Weniger Entwicklungs- und Testaufwand&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
