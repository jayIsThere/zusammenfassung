<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>KBE Übung on Jays Zusammenfassung</title>
    <link>https://jayIsThere.github.io/zusammenfassung/categories/kbe-%C3%BCbung/</link>
    <description>Recent content in KBE Übung on Jays Zusammenfassung</description>
    <generator>Hugo -- 0.146.5</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Apr 2025 18:08:32 +0200</lastBuildDate>
    <atom:link href="https://jayIsThere.github.io/zusammenfassung/categories/kbe-%C3%BCbung/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>KBE Übung 2</title>
      <link>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe_uebung2/</link>
      <pubDate>Thu, 17 Apr 2025 18:08:32 +0200</pubDate>
      <guid>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe_uebung2/</guid>
      <description>&lt;h2 id=&#34;übungsblatt-2&#34;&gt;Übungsblatt 2&lt;/h2&gt;
&lt;h3 id=&#34;aufgabe-1-beweggründe-für-die-entstehung-des-komponentenbasierten-software-engineerings&#34;&gt;Aufgabe 1. Beweggründe für die Entstehung des Komponentenbasierten Software-Engineerings&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Wiederverwendbarkeit&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Softwarekomponenten können wiederverwendet werden, was Entwicklungszeit und Kosten spart.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Modularität&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Komponenten sind unabhängig, was Wartung und Erweiterung vereinfacht.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Flexibilität&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Komponenten können ausgetauscht werden, ohne das gesamte System zu ändern.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Skalierbarkeit&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Komponenten können unabhängig skaliert und optimiert werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-2-vier-grundlagen-des-komponentenbasierten-software-engineerings&#34;&gt;Aufgabe 2. Vier Grundlagen des Komponentenbasierten Software-Engineerings&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Unabhängige Komponenten&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Komponenten können ohne Systemänderungen ausgetauscht werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Komponentenstandards&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Einheitliche Schnittstellen und Integrationen sind wichtig.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Middleware&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>KBE Übung 1</title>
      <link>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe_uebung1/</link>
      <pubDate>Thu, 10 Apr 2025 18:08:29 +0200</pubDate>
      <guid>https://jayIsThere.github.io/zusammenfassung/posts/kbe/kbe_uebung1/</guid>
      <description>&lt;h2 id=&#34;übungsblatt-1&#34;&gt;Übungsblatt 1&lt;/h2&gt;
&lt;h3 id=&#34;aufgabe-1-grundstrategie-des-software-engineerings&#34;&gt;Aufgabe 1. Grundstrategie des Software-Engineerings&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Ziel der Wiederverwendung&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wiederverwendung vorhandener Software, statt neue Software von Grund auf zu entwickeln.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-2-aspekte-die-den-ansatz-getrieben-haben&#34;&gt;Aufgabe 2. Aspekte, die den Ansatz getrieben haben:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Geringere Produktions- und Wartungskosten&lt;/li&gt;
&lt;li&gt;Schnellere Auslieferung von Systemen&lt;/li&gt;
&lt;li&gt;Höhere Softwarequalität&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-3-beispiele-für-etablierte-wiederverwendbare-software&#34;&gt;Aufgabe 3. Beispiele für etablierte wiederverwendbare Software:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Open Source Code (z. B. Apache Commons)&lt;/li&gt;
&lt;li&gt;ERP-Systeme (z. B. SAP)&lt;/li&gt;
&lt;li&gt;Komponentenbibliotheken&lt;/li&gt;
&lt;li&gt;Webservices (z. B. PayPal)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-4-größenordnungen-von-softwareeinheiten-von-groß-nach-klein&#34;&gt;Aufgabe 4. Größenordnungen von Softwareeinheiten (von groß nach klein):&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Systeme&lt;/li&gt;
&lt;li&gt;Anwendungen&lt;/li&gt;
&lt;li&gt;Softwareproduktlinien&lt;/li&gt;
&lt;li&gt;Komponenten&lt;/li&gt;
&lt;li&gt;Objekte und Funktionen&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-5-beispiele-für-jede-größenordnung&#34;&gt;Aufgabe 5. Beispiele für jede Größenordnung:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;System&lt;/strong&gt;: Ein ERP-System, z. B. SAP&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anwendung&lt;/strong&gt;: Ein CRM-System&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Produktlinie&lt;/strong&gt;: Softwarelinie für medizinische Geräte&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Komponente&lt;/strong&gt;: Zahlungsmodul&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funktion/Objekt&lt;/strong&gt;: Logging-Klasse aus Apache Commons&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-6-vorteile-der-wiederverwendung&#34;&gt;Aufgabe 6. Vorteile der Wiederverwendung:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Geringere Kosten&lt;/li&gt;
&lt;li&gt;Höhere Zuverlässigkeit&lt;/li&gt;
&lt;li&gt;Geringeres Entwicklungsrisiko&lt;/li&gt;
&lt;li&gt;Schnellere Markteinführung&lt;/li&gt;
&lt;li&gt;Effektiver Einsatz von Experten&lt;/li&gt;
&lt;li&gt;Standardkonformität&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-6-probleme-der-wiederverwendung&#34;&gt;Aufgabe 6. Probleme der Wiederverwendung:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Höhere Wartungskosten&lt;/li&gt;
&lt;li&gt;Mangel an Werkzeugunterstützung&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Not-invented-here&amp;rdquo;-Syndrom&lt;/li&gt;
&lt;li&gt;Hoher Aufwand für Bibliotheksverwaltung&lt;/li&gt;
&lt;li&gt;Schwierige Suche und Anpassung von Komponenten&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;aufgabe-7-planung-der-wiederverwendung&#34;&gt;Aufgabe 7. Planung der Wiederverwendung&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Vier Schlüsselfaktoren:&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
